JS Cheat Sheet - What We Got
I know too many languages at this point to keep the semantics of what operators I do and dont have, syntax of stuff like switches, etc. So heres a text file that keeps them for me for reference in case I want it in the future. 

-1. TIDBITS
-----------
Order of operations applies
Between the {} is refered to as a block of code
Blocks (ie. placement of the { ) start at the end of the line, not a new line 
You can skip the blocks {} if its only one line. Ex. if (condition) console.log("message") is fine. Which is infuriating but whatever
Switch case is for comparing a variable value (the switch param) to the case parameters
Things that are the same: (screaming internally)
	1. for (let i = 0; i <= 10; i++) if (i % 2 != 0) console.log(i) 
	2. for (let i = 0; i <= 10; i++) {
			if (i % 2 != 0) console.log(i) 
		}
	3. for (let i = 0; i <= 10; i++) {
			if (i % 2 != 0) {
				console.log(i);
			}
		} 
While vs Do-While - Do-While executed at least once even if the condition is false
For-In/For-Of - used mainly to iterate over properties in an object or elements in an array (For-In for objects, For-Of for arrays (since ES6))
Accessing properties of an object, dot (object.targetProperty) or bracket notation (object['name of target property as string'])
Use bracket notation if you dont know at the time of writing code which property you are going to access, for ex name of traget property calculated at runtime
Functions are objects



0. COMMON TERMINOLOGY because some languages don't treat it the same.
--------------------------------------------------------------------
Operator - Used to do stuff, like asign values
Expression - Produces a value, combos of operators and variables
Short Circuiting - When using logical operators, when the desired value is found it stops and returns, ignoring the rest. Ex. false || 1 || 2 returns 1, skips 2
Truthy (anything not on the falsy list) vs. Falsy (undefined, null, 0, false, '', NaN) 
Break - jump out of loop at runtime, applies to all loops
Continue - when js engine sees continue, it will jump to the beginning of the loop and continue execution of the next iteration, outdated/ugly, not recomended for use



1. OPERATOR AVAILABILITY
------------------------
Arethemetic - [ + , - , * , / , % , ** (exponent notation) , ++ , -- ]
Assignment - [ = , += , -=, *= ]
Comparison - Relational [ > , < , >= , <= ] Equality [ === , !== , == , != ]
	1a. Strict (===) vs Loose Equality (==) - type and value vs just value, loose converts the type of the left side to the right sides type
Logical - [ ||, &&, ! ]
	1b. Truthy (anything not on the falsy list) vs. Falsy (undefined, null, 0, false, '', NaN) 
		1b1. Logical operators use these, if in a logical operation it sees not explicit true or false it will try and interpret, for ex with || as soon as a truthy value is found it stops 
Bitwise - [ &, | ]
	1c. Works on individual bits, can use bytes (8 bits) to set and compare things, can treat as setting flags
Ternary - [ let variable = expression ? 'use this as value if expression is true' : 'use this as value if expression is false'; ]
Loops - [ for, while, do while, for in, for of]


2. SYNTAX QUICK REF
-------------------

Variables: 
	let x = value;
	const x = value;
	x = value;

Objects:
	const person = {
		name: 'Leah',
		age: 26
	};

Funtions: 
function funcName (localparams) {
	code block;
}

Accessing Obj Properties:
	1. Dot notation
		ex. person.name , object.targetProperty
	2. Bracket Notation
		ex. person['name'] , object['name of target property as string']

Ternary Expressions: 
	let variable = expression ? 'use this as value if expression is true' : 'use this as value if expression is false';

If/Else:
	if (condition) {
		code and stuff
		statment to be executed
	}
	else if (another condition) {
		code and stuff
		statement to be executed
	}
	else statment

	IF ONLY ONE LINE STATEMENT, SKIP {}, because convention in JS is infuriating:
	if (condition) 
		statment to be executed
	else if (another condition) 
		statement to be executed
	else statment

Switch/Case:
	switch (variable) {
		case 'thing':
			console.log('is thing');
			break;
		case 'thing2':
			console.log('is thing 2');
			break;
		default: 
			console.log('is unknown thing');
	}

Loops: 
	1. For 
		1a. Single Line
			for (let i = 0; i < 5; i++) console.log('Hello World')
		1b. Multi Line
			for (let i = 0; i < 5; i++) {
				stuff here
				console.log('Hello World')
			}

	2. While 
		let i = 0;
		while (i <= 10) {
			if (i % 2 != 0) { console.log("The Odds ", i); }
			i++;
		}

	3. Do-While
		let j = 0;
		do {
			if (j % 2 != 0) console.log(j);
			j++;
		} while (j <= 10);

	4. For-In (iterate over properties of object)
		const person = {
			name: 'Leah',
			age: 26
		};

		for (let key in person) {
			console.log(key, person[key]);
		}

	5. For-Of (iterate over elements in array)


3. CREATING AN OBJECT 
---------------------
	-if you dont use new operator, 'this' by default points to the global object, which is window

	1. Factory Function (Camel case)(call funtion that returns a new object)
		function factoryFunctionExample(params){
			return {
				params,
				imAMethod() {
					console.log('method doing stuff');
				}
			}
		}
		const factoryObj = factoryFunctionExample(1); 

	2. Constructor Function (Pascal naming)(uses new operator, this creates empty js object under the hood, sets 'this' to point to the new empty object, returns object)
		function ConstructorExample(params) {
			this,params = params;
			this.methodexample = function() {
				console.log('doing stuff');
			}
		}
		const constructorObj = new constructorExample(1);

4. OBJECT MODIFICATION
----------------------
	-even though objs are declared using const, you can add and remove methods and properties. constant here means that the circle object itsself cant be reassigned or changed

	1. Adding Parameters
		const objname = {
			property: avalue
		};
		objname.newparam = 'new param value here';

	2. Adding Methods 
		const objname = {
			property: avalue
		};
		objname.functionname = function() {};

	3. Deleting Properties Or Methods (both done the same way)
		3a. Property
			delete objname.property;
		3b. Method
			delete objname.functionname;














